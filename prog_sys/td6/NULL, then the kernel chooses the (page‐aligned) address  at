[4mmmap[24m(2)                       System Calls Manual                      [4mmmap[24m(2)

[1mNAME[0m
       mmap, munmap - map or unmap files or devices into memory

[1mLIBRARY[0m
       Standard C library ([4mlibc[24m, [4m-lc[24m)

[1mSYNOPSIS[0m
       [1m#include <sys/mman.h>[0m

       [1mvoid *mmap(void [4m[22maddr[24m[1m[.[4m[22mlength[24m[1m], size_t [4m[22mlength[24m[1m, int [4m[22mprot[24m[1m, int [4m[22mflags[24m[1m,[0m
                  [1mint [4m[22mfd[24m[1m, off_t [4m[22moffset[24m[1m);[0m
       [1mint munmap(void [4m[22maddr[24m[1m[.[4m[22mlength[24m[1m], size_t [4m[22mlength[24m[1m);[0m

       See NOTES for information on feature test macro requirements.

[1mDESCRIPTION[0m
       [1mmmap[22m()  creates a new mapping in the virtual address space of the call‚Äê
       ing process.  The starting address for the new mapping is specified  in
       [4maddr[24m.   The  [4mlength[24m argument specifies the length of the mapping (which
       must be greater than 0).

       If [4maddr[24m is NULL, then the kernel chooses the (page‚Äêaligned) address  at
       which to create the mapping; this is the most portable method of creat‚Äê
       ing  a new mapping.  If [4maddr[24m is not NULL, then the kernel takes it as a
       hint about where to place the mapping; on Linux, the kernel will pick a
       nearby page boundary (but always above or equal to the value  specified
       by [4m/proc/sys/vm/mmap_min_addr[24m) and attempt to create the mapping there.
       If another mapping already exists there, the kernel picks a new address
       that may or may not depend on the hint.  The address of the new mapping
       is returned as the result of the call.

       The contents of a file mapping (as opposed to an anonymous mapping; see
       [1mMAP_ANONYMOUS  [22mbelow),  are  initialized using [4mlength[24m bytes starting at
       offset [4moffset[24m in the file (or other object) referred to by the file de‚Äê
       scriptor [4mfd[24m.  [4moffset[24m must be a multiple of the page size as returned by
       [4msysconf(_SC_PAGE_SIZE)[24m.

       After the [1mmmap[22m() call has returned, the file  descriptor,  [4mfd[24m,  can  be
       closed immediately without invalidating the mapping.

       The  [4mprot[24m  argument describes the desired memory protection of the map‚Äê
       ping (and must not conflict with the open mode of the file).  It is ei‚Äê
       ther [1mPROT_NONE [22mor the bitwise OR of one or more of the following flags:

       [1mPROT_EXEC  [22mPages may be executed.

       [1mPROT_READ  [22mPages may be read.

       [1mPROT_WRITE [22mPages may be written.

       [1mPROT_NONE  [22mPages may not be accessed.

   [1mThe flags argument[0m
       The [4mflags[24m argument determines whether updates to the mapping are  visi‚Äê
       ble to other processes mapping the same region, and whether updates are
       carried through to the underlying file.  This behavior is determined by
       including exactly one of the following values in [4mflags[24m:

       [1mMAP_SHARED[0m
              Share this mapping.  Updates to the mapping are visible to other
              processes  mapping  the  same  region, and (in the case of file‚Äê
              backed mappings) are carried through  to  the  underlying  file.
              (To  precisely  control  when updates are carried through to the
              underlying file requires the use of [1mmsync[22m(2).)

       [1mMAP_SHARED_VALIDATE [22m(since Linux 4.15)
              This flag provides the same behavior as [1mMAP_SHARED  [22mexcept  that
              [1mMAP_SHARED [22mmappings ignore unknown flags in [4mflags[24m.  By contrast,
              when  creating  a  mapping using [1mMAP_SHARED_VALIDATE[22m, the kernel
              verifies all passed flags are known and fails the  mapping  with
              the  error  [1mEOPNOTSUPP  [22mfor unknown flags.  This mapping type is
              also required to be  able  to  use  some  mapping  flags  (e.g.,
              [1mMAP_SYNC[22m).

       [1mMAP_PRIVATE[0m
              Create  a private copy‚Äêon‚Äêwrite mapping.  Updates to the mapping
              are not visible to other processes mapping the  same  file,  and
              are  not carried through to the underlying file.  It is unspeci‚Äê
              fied whether changes made to the file after the [1mmmap[22m() call  are
              visible in the mapped region.

       Both  [1mMAP_SHARED  [22mand  [1mMAP_PRIVATE  [22mare  described  in POSIX.1‚Äê2001 and
       POSIX.1‚Äê2008.  [1mMAP_SHARED_VALIDATE [22mis a Linux extension.

       In addition, zero or more of the following values can be ORed in [4mflags[24m:

       [1mMAP_32BIT [22m(since Linux 2.4.20, 2.6)
              Put the mapping into the first 2 Gigabytes of  the  process  ad‚Äê
              dress  space.  This flag is supported only on x86‚Äê64, for 64‚Äêbit
              programs.  It was added to allow thread stacks to  be  allocated
              somewhere in the first 2 GB of memory, so as to improve context‚Äê
              switch  performance  on  some  early  64‚Äêbit processors.  Modern
              x86‚Äê64 processors no longer have this  performance  problem,  so
              use  of  this  flag  is  not  required  on  those  systems.  The
              [1mMAP_32BIT [22mflag is ignored when [1mMAP_FIXED [22mis set.

       [1mMAP_ANON[0m
              Synonym for [1mMAP_ANONYMOUS[22m; provided for compatibility with other
              implementations.

       [1mMAP_ANONYMOUS[0m
              The mapping is not backed by any file; its contents are initial‚Äê
              ized to zero.  The [4mfd[24m argument is ignored; however, some  imple‚Äê
              mentations require [4mfd[24m to be -1 if [1mMAP_ANONYMOUS [22m(or [1mMAP_ANON[22m) is
              specified,  and  portable  applications should ensure this.  The
              [4moffset[24m argument should be zero.  Support  for  [1mMAP_ANONYMOUS  [22min
              conjunction with [1mMAP_SHARED [22mwas added in Linux 2.4.

       [1mMAP_DENYWRITE[0m
              This  flag  is ignored.  (Long ago‚ÄîLinux 2.0 and earlier‚Äîit sig‚Äê
              naled that attempts to write to the underlying file should  fail
              with  [1mETXTBSY[22m.   But  this was a source of denial‚Äêof‚Äêservice at‚Äê
              tacks.)

       [1mMAP_EXECUTABLE[0m
              This flag is ignored.

       [1mMAP_FILE[0m
              Compatibility flag.  Ignored.

       [1mMAP_FIXED[0m
              Don‚Äôt interpret [4maddr[24m as a hint: place  the  mapping  at  exactly
              that address.  [4maddr[24m must be suitably aligned: for most architec‚Äê
              tures  a  multiple of the page size is sufficient; however, some
              architectures may impose additional restrictions.  If the memory
              region specified by [4maddr[24m and [4mlength[24m overlaps pages of any exist‚Äê
              ing mapping(s), then the overlapped part of  the  existing  map‚Äê
              ping(s)  will  be discarded.  If the specified address cannot be
              used, [1mmmap[22m() will fail.

              Software that aspires to be portable should  use  the  [1mMAP_FIXED[0m
              flag  with  care,  keeping  in  mind  that the exact layout of a
              process‚Äôs memory mappings is allowed to change significantly be‚Äê
              tween Linux versions, C library versions, and  operating  system
              releases.  [4mCarefully[24m [4mread[24m [4mthe[24m [4mdiscussion[24m [4mof[24m [4mthis[24m [4mflag[24m [4min[24m [4mNOTES![0m

       [1mMAP_FIXED_NOREPLACE [22m(since Linux 4.17)
              This  flag  provides  behavior that is similar to [1mMAP_FIXED [22mwith
              respect  to  the  [4maddr[24m  enforcement,   but   differs   in   that
              [1mMAP_FIXED_NOREPLACE  [22mnever  clobbers a preexisting mapped range.
              If the requested range would collide with an  existing  mapping,
              then  this  call  fails  with  the  error [1mEEXIST.  [22mThis flag can
              therefore be used as a way to atomically (with respect to  other
              threads)  attempt  to map an address range: one thread will suc‚Äê
              ceed; all others will report failure.

              Note  that  older   kernels   which   do   not   recognize   the
              [1mMAP_FIXED_NOREPLACE [22mflag will typically (upon detecting a colli‚Äê
              sion  with a preexisting mapping) fall back to a ‚Äúnon‚Äê[1mMAP_FIXED[22m‚Äù
              type of behavior: they will return an address that is  different
              from  the  requested  address.   Therefore,  backward‚Äêcompatible
              software should check the returned address against the requested
              address.

       [1mMAP_GROWSDOWN[0m
              This flag is used for stacks.  It indicates to the  kernel  vir‚Äê
              tual  memory  system  that the mapping should extend downward in
              memory.  The return address is one page lower  than  the  memory
              area  that  is actually created in the process‚Äôs virtual address
              space.  Touching an address in the "guard" page below  the  map‚Äê
              ping  will cause the mapping to grow by a page.  This growth can
              be repeated until the mapping grows to within a page of the high
              end of the next lower  mapping,  at  which  point  touching  the
              "guard" page will result in a [1mSIGSEGV [22msignal.

       [1mMAP_HUGETLB [22m(since Linux 2.6.32)
              Allocate  the  mapping using "huge" pages.  See the Linux kernel
              source  file  [4mDocumentation/admin-guide/mm/hugetlbpage.rst[24m   for
              further information, as well as NOTES, below.

       [1mMAP_HUGE_2MB[22m, [1mMAP_HUGE_1GB [22m(since Linux 3.8)
              Used  in  conjunction  with  [1mMAP_HUGETLB  [22mto  select alternative
              hugetlb page sizes (respectively, 2 MB and 1 GB) on systems that
              support multiple hugetlb page sizes.

              More generally, the desired huge page size can be configured  by
              encoding  the  base‚Äê2  logarithm of the desired page size in the
              six bits at the offset [1mMAP_HUGE_SHIFT[22m.  (A value of zero in this
              bit field provides the default huge page size; the default  huge
              page  size  can be discovered via the [4mHugepagesize[24m field exposed
              by [4m/proc/meminfo[24m.)  Thus, the above two  constants  are  defined
              as:

                  #define MAP_HUGE_2MB    (21 << MAP_HUGE_SHIFT)
                  #define MAP_HUGE_1GB    (30 << MAP_HUGE_SHIFT)

              The  range  of  huge page sizes that are supported by the system
              can be discovered by listing  the  subdirectories  in  [4m/sys/ker‚Äê[0m
              [4mnel/mm/hugepages[24m.

       [1mMAP_LOCKED [22m(since Linux 2.5.37)
              Mark the mapped region to be locked in the same way as [1mmlock[22m(2).
              This  implementation  will  try to populate (prefault) the whole
              range but the [1mmmap[22m() call  doesn‚Äôt  fail  with  [1mENOMEM  [22mif  this
              fails.   Therefore  major  faults might happen later on.  So the
              semantic is not as strong as [1mmlock[22m(2).  One  should  use  [1mmmap[22m()
              plus  [1mmlock[22m(2)  when  major  faults are not acceptable after the
              initialization of the mapping.  The [1mMAP_LOCKED [22mflag  is  ignored
              in older kernels.

       [1mMAP_NONBLOCK [22m(since Linux 2.5.46)
              This  flag  is meaningful only in conjunction with [1mMAP_POPULATE[22m.
              Don‚Äôt perform read‚Äêahead: create page tables  entries  only  for
              pages that are already present in RAM.  Since Linux 2.6.23, this
              flag  causes  [1mMAP_POPULATE [22mto do nothing.  One day, the combina‚Äê
              tion of [1mMAP_POPULATE [22mand [1mMAP_NONBLOCK [22mmay be reimplemented.

       [1mMAP_NORESERVE[0m
              Do not reserve swap space for this mapping.  When swap space  is
              reserved,  one  has  the guarantee that it is possible to modify
              the mapping.  When swap space is  not  reserved  one  might  get
              [1mSIGSEGV  [22mupon  a  write if no physical memory is available.  See
              also the discussion of the  file  [4m/proc/sys/vm/overcommit_memory[0m
              in  [1mproc[22m(5).   Before  Linux  2.6, this flag had effect only for
              private writable mappings.

       [1mMAP_POPULATE [22m(since Linux 2.5.46)
              Populate (prefault) page tables for a mapping.  For a file  map‚Äê
              ping, this causes read‚Äêahead on the file.  This will help to re‚Äê
              duce  blocking  on  page  faults later.  The [1mmmap[22m() call doesn‚Äôt
              fail if the mapping cannot be populated  (for  example,  due  to
              limitations  on  the  number  of  mapped  huge  pages when using
              [1mMAP_HUGETLB[22m).  Support for [1mMAP_POPULATE [22min conjunction with pri‚Äê
              vate mappings was added in Linux 2.6.23.

       [1mMAP_STACK [22m(since Linux 2.6.27)
              Allocate the mapping at an address suitable  for  a  process  or
              thread stack.

              This  flag is currently a no‚Äêop on Linux.  However, by employing
              this flag, applications can ensure that they  transparently  ob‚Äê
              tain support if the flag is implemented in the future.  Thus, it
              is  used  in the glibc threading implementation to allow for the
              fact that some architectures may (later) require special  treat‚Äê
              ment  for  stack  allocations.   A further reason to employ this
              flag is portability: [1mMAP_STACK [22mexists (and  has  an  effect)  on
              some other systems (e.g., some of the BSDs).

       [1mMAP_SYNC [22m(since Linux 4.15)
              This flag is available only with the [1mMAP_SHARED_VALIDATE [22mmapping
              type;  mappings  of  type  [1mMAP_SHARED  [22mwill silently ignore this
              flag.  This flag is supported only for files supporting DAX (di‚Äê
              rect mapping of persistent memory).  For other files, creating a
              mapping with this flag results in an [1mEOPNOTSUPP [22merror.

              Shared file mappings with this flag provide the  guarantee  that
              while some memory is mapped writable in the address space of the
              process,  it will be visible in the same file at the same offset
              even after the system crashes or is  rebooted.   In  conjunction
              with  the  use  of  appropriate  CPU instructions, this provides
              users of such mappings with a more efficient way of making  data
              modifications persistent.

       [1mMAP_UNINITIALIZED [22m(since Linux 2.6.33)
              Don‚Äôt  clear  anonymous pages.  This flag is intended to improve
              performance on embedded devices.  This flag is honored  only  if
              the  kernel was configured with the [1mCONFIG_MMAP_ALLOW_UNINITIAL‚Äê[0m
              [1mIZED [22moption.  Because of the security implications, that  option
              is  normally  enabled  only  on  embedded devices (i.e., devices
              where one has complete control of the contents of user memory).

       Of the above flags, only [1mMAP_FIXED [22mis  specified  in  POSIX.1‚Äê2001  and
       POSIX.1‚Äê2008.  However, most systems also support [1mMAP_ANONYMOUS [22m(or its
       synonym [1mMAP_ANON[22m).

   [1mmunmap()[0m
       The [1mmunmap[22m() system call deletes the mappings for the specified address
       range,  and  causes further references to addresses within the range to
       generate invalid memory references.  The region is  also  automatically
       unmapped  when  the  process is terminated.  On the other hand, closing
       the file descriptor does not unmap the region.

       The address [4maddr[24m must be a multiple of the page size (but  [4mlength[24m  need
       not  be).   All  pages containing a part of the indicated range are un‚Äê
       mapped, and subsequent references to these pages will generate [1mSIGSEGV[22m.
       It is not an error if the indicated range does not contain  any  mapped
       pages.

[1mRETURN VALUE[0m
       On success, [1mmmap[22m() returns a pointer to the mapped area.  On error, the
       value  [1mMAP_FAILED  [22m(that is, [4m(void[24m [4m*)[24m [4m-1[24m) is returned, and [4merrno[24m is set
       to indicate the error.

       On success, [1mmunmap[22m() returns 0.  On failure, it returns -1,  and  [4merrno[0m
       is set to indicate the error (probably to [1mEINVAL[22m).

[1mERRORS[0m
       [1mEACCES [22mA  file descriptor refers to a non‚Äêregular file.  Or a file map‚Äê
              ping was  requested,  but  [4mfd[24m  is  not  open  for  reading.   Or
              [1mMAP_SHARED  [22mwas  requested  and [1mPROT_WRITE [22mis set, but [4mfd[24m is not
              open in read/write ([1mO_RDWR[22m) mode.  Or [1mPROT_WRITE [22mis set, but the
              file is append‚Äêonly.

       [1mEAGAIN [22mThe file has been locked, or too much  memory  has  been  locked
              (see [1msetrlimit[22m(2)).

       [1mEBADF  [4m[22mfd[24m  is  not  a  valid file descriptor (and [1mMAP_ANONYMOUS [22mwas not
              set).

       [1mEEXIST MAP_FIXED_NOREPLACE [22mwas specified in [4mflags[24m, and the  range  cov‚Äê
              ered by [4maddr[24m and [4mlength[24m clashes with an existing mapping.

       [1mEINVAL [22mWe don‚Äôt like [4maddr[24m, [4mlength[24m, or [4moffset[24m (e.g., they are too large,
              or not aligned on a page boundary).

       [1mEINVAL [22m(since Linux 2.6.12) [4mlength[24m was 0.

       [1mEINVAL [4m[22mflags[24m    contained   none   of   [1mMAP_PRIVATE[22m,   [1mMAP_SHARED[22m,   or
              [1mMAP_SHARED_VALIDATE[22m.

       [1mENFILE [22mThe system‚Äêwide limit on the total number of open files has been
              reached.

       [1mENODEV [22mThe underlying filesystem of the specified file does not support
              memory mapping.

       [1mENOMEM [22mNo memory is available.

       [1mENOMEM [22mThe process‚Äôs maximum number of mappings  would  have  been  ex‚Äê
              ceeded.   This error can also occur for [1mmunmap[22m(), when unmapping
              a region in the middle of an existing mapping,  since  this  re‚Äê
              sults in two smaller mappings on either side of the region being
              unmapped.

       [1mENOMEM [22m(since  Linux 4.7) The process‚Äôs [1mRLIMIT_DATA [22mlimit, described in
              [1mgetrlimit[22m(2), would have been exceeded.

       [1mENOMEM [22mWe don‚Äôt like [4maddr[24m, because it exceeds the virtual address space
              of the CPU.

       [1mEOVERFLOW[0m
              On 32‚Äêbit architecture together with the  large  file  extension
              (i.e.,  using 64‚Äêbit [4moff_t[24m): the number of pages used for [4mlength[0m
              plus number of pages used for  [4moffset[24m  would  overflow  [4munsigned[0m
              [4mlong[24m (32 bits).

       [1mEPERM  [22mThe [4mprot[24m argument asks for [1mPROT_EXEC [22mbut the mapped area belongs
              to a file on a filesystem that was mounted no‚Äêexec.

       [1mEPERM  [22mThe operation was prevented by a file seal; see [1mfcntl[22m(2).

       [1mEPERM  [22mThe [1mMAP_HUGETLB [22mflag was specified, but the caller was not priv‚Äê
              ileged  (did  not have the [1mCAP_IPC_LOCK [22mcapability) and is not a
              member of the [4msysctl_hugetlb_shm_group[24m group; see  the  descrip‚Äê
              tion of [4m/proc/sys/vm/sysctl_hugetlb_shm_group[24m in

       [1mETXTBSY[0m
              [1mMAP_DENYWRITE [22mwas set but the object specified by [4mfd[24m is open for
              writing.

       Use of a mapped region can result in these signals:

       [1mSIGSEGV[0m
              Attempted write into a region mapped as read‚Äêonly.

       [1mSIGBUS [22mAttempted  access  to  a page of the buffer that lies beyond the
              end of the mapped file.  For an explanation of the treatment  of
              the  bytes  in  the page that corresponds to the end of a mapped
              file that is not a multiple of the page size, see NOTES.

[1mATTRIBUTES[0m
       For an explanation of the terms  used  in  this  section,  see  [1mattrib‚Äê[0m
       [1mutes[22m(7).
       ‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¨‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¨‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê
       ‚îÇ [1mInterface                                 [22m‚îÇ [1mAttribute     [22m‚îÇ [1mValue   [22m‚îÇ
       ‚îú‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îº‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îº‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î§
       ‚îÇ [1mmmap[22m(), [1mmunmap[22m()                          ‚îÇ Thread safety ‚îÇ MT‚ÄêSafe ‚îÇ
       ‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¥‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¥‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò

[1mSTANDARDS[0m
       POSIX.1‚Äê2001, POSIX.1‚Äê2008, SVr4, 4.4BSD.

       On POSIX systems on which [1mmmap[22m(), [1mmsync[22m(2), and [1mmunmap[22m() are available,
       [1m_POSIX_MAPPED_FILES [22mis defined in [4m<unistd.h>[24m to a value greater than 0.
       (See also [1msysconf[22m(3).)

[1mNOTES[0m
       Memory  mapped by [1mmmap[22m() is preserved across [1mfork[22m(2), with the same at‚Äê
       tributes.

       A file is mapped in multiples of the page size.  For a file that is not
       a multiple of the page size, the remaining bytes in the partial page at
       the end of the mapping are zeroed when  mapped,  and  modifications  to
       that  region  are  not written out to the file.  The effect of changing
       the size of the underlying file of a mapping on the pages  that  corre‚Äê
       spond to added or removed regions of the file is unspecified.

       On   some  hardware  architectures  (e.g.,  i386),  [1mPROT_WRITE  [22mimplies
       [1mPROT_READ[22m.  It is  architecture  dependent  whether  [1mPROT_READ  [22mimplies
       [1mPROT_EXEC  [22mor  not.   Portable  programs should always set [1mPROT_EXEC [22mif
       they intend to execute code in the new mapping.

       The portable way to create a mapping is to specify [4maddr[24m  as  0  (NULL),
       and  omit  [1mMAP_FIXED  [22mfrom [4mflags[24m.  In this case, the system chooses the
       address for the mapping; the address is chosen so as  not  to  conflict
       with any existing mapping, and will not be 0.  If the [1mMAP_FIXED [22mflag is
       specified,  and  [4maddr[24m  is  0  (NULL), then the mapped address will be 0
       (NULL).

       Certain [4mflags[24m constants are  defined  only  if  suitable  feature  test
       macros  are  defined  (possibly by default): [1m_DEFAULT_SOURCE [22mwith glibc
       2.19 or later; or [1m_BSD_SOURCE [22mor [1m_SVID_SOURCE [22min glibc 2.19 and  earli‚Äê
       er.   (Employing  [1m_GNU_SOURCE  [22malso  suffices, and requiring that macro
       specifically would have been more logical, since these  flags  are  all
       Linux‚Äêspecific.)  The relevant flags are: [1mMAP_32BIT[22m, [1mMAP_ANONYMOUS [22m(and
       the   synonym   [1mMAP_ANON[22m),   [1mMAP_DENYWRITE[22m,  [1mMAP_EXECUTABLE[22m,  [1mMAP_FILE[22m,
       [1mMAP_GROWSDOWN[22m, [1mMAP_HUGETLB[22m,  [1mMAP_LOCKED[22m,  [1mMAP_NONBLOCK[22m,  [1mMAP_NORESERVE[22m,
       [1mMAP_POPULATE[22m, and [1mMAP_STACK[22m.

       An  application  can  determine  which pages of a mapping are currently
       resident in the buffer/page cache using [1mmincore[22m(2).

   [1mUsing MAP_FIXED safely[0m
       The only safe use for [1mMAP_FIXED [22mis where the address range specified by
       [4maddr[24m and [4mlength[24m was previously reserved using another  mapping;  other‚Äê
       wise,  the  use  of  [1mMAP_FIXED [22mis hazardous because it forcibly removes
       preexisting mappings, making it easy for  a  multithreaded  process  to
       corrupt its own address space.

       For  example,  suppose  that thread A looks through [4m/proc/<pid>/maps[24m in
       order to  locate  an  unused  address  range  that  it  can  map  using
       [1mMAP_FIXED[22m,  while  thread B simultaneously acquires part or all of that
       same   address   range.    When   thread   A    subsequently    employs
       [1mmmap(MAP_FIXED)[22m,  it will effectively clobber the mapping that thread B
       created.  In this scenario, thread B need not create a mapping  direct‚Äê
       ly;  simply  making  a library call that, internally, uses [1mdlopen[22m(3) to
       load some other shared library, will suffice.  The [1mdlopen[22m(3) call  will
       map  the library into the process‚Äôs address space.  Furthermore, almost
       any library call may be implemented in a way that adds memory  mappings
       to the address space, either with this technique, or by simply allocat‚Äê
       ing memory.  Examples include [1mbrk[22m(2), [1mmalloc[22m(3), [1mpthread_create[22m(3), and
       the PAM libraries ]8;;http://www.linux-pam.org\http://www.linux‚Äêpam.org]8;;\.

       Since  Linux  4.17, a multithreaded program can use the [1mMAP_FIXED_NORE‚Äê[0m
       [1mPLACE [22mflag to avoid the hazard described above when attempting to  cre‚Äê
       ate a mapping at a fixed address that has not been reserved by a preex‚Äê
       isting mapping.

   [1mTimestamps changes for file‚Äêbacked mappings[0m
       For file‚Äêbacked mappings, the [4mst_atime[24m field for the mapped file may be
       updated at any time between the [1mmmap[22m() and the corresponding unmapping;
       the  first  reference  to a mapped page will update the field if it has
       not been already.

       The [4mst_ctime[24m and [4mst_mtime[24m field for a file mapped with  [1mPROT_WRITE  [22mand
       [1mMAP_SHARED  [22mwill be updated after a write to the mapped region, and be‚Äê
       fore a subsequent [1mmsync[22m(2) with the [1mMS_SYNC [22mor [1mMS_ASYNC  [22mflag,  if  one
       occurs.

   [1mHuge page (Huge TLB) mappings[0m
       For mappings that employ huge pages, the requirements for the arguments
       of  [1mmmap[22m()  and [1mmunmap[22m() differ somewhat from the requirements for map‚Äê
       pings that use the native system page size.

       For [1mmmap[22m(), [4moffset[24m must be a multiple of the underlying huge page size.
       The system automatically aligns [4mlength[24m to be a multiple of the underly‚Äê
       ing huge page size.

       For [1mmunmap[22m(), [4maddr[24m, and [4mlength[24m must both be a multiple of the  underly‚Äê
       ing huge page size.

   [1mC library/kernel differences[0m
       This  page describes the interface provided by the glibc [1mmmap[22m() wrapper
       function.  Originally, this function invoked a system call of the  same
       name.   Since  Linux  2.4,  that  system  call  has  been superseded by
       [1mmmap2[22m(2), and  nowadays  the  glibc  [1mmmap[22m()  wrapper  function  invokes
       [1mmmap2[22m(2) with a suitably adjusted value for [4moffset[24m.

[1mBUGS[0m
       On  Linux,  there  are  no  guarantees like those suggested above under
       [1mMAP_NORESERVE[22m.  By default, any process can be  killed  at  any  moment
       when the system runs out of memory.

       Before  Linux  2.6.7,  the [1mMAP_POPULATE [22mflag has effect only if [4mprot[24m is
       specified as [1mPROT_NONE[22m.

       SUSv3 specifies that [1mmmap[22m() should fail if [4mlength[24m is 0.   However,  be‚Äê
       fore Linux 2.6.12, [1mmmap[22m() succeeded in this case: no mapping was creat‚Äê
       ed  and  the call returned [4maddr[24m.  Since Linux 2.6.12, [1mmmap[22m() fails with
       the error [1mEINVAL [22mfor this case.

       POSIX specifies that the system shall always zero fill any partial page
       at the end of the object and that system will never write any modifica‚Äê
       tion of the object beyond its end.  On Linux, when you  write  data  to
       such  partial  page  after the end of the object, the data stays in the
       page cache even after the file is closed and unmapped and  even  though
       the  data  is never written to the file itself, subsequent mappings may
       see the modified content.  In some cases, this could be fixed by  call‚Äê
       ing  [1mmsync[22m(2)  before the unmap takes place; however, this doesn‚Äôt work
       on [1mtmpfs[22m(5) (for example, when using the POSIX shared memory  interface
       documented in [1mshm_overview[22m(7)).

[1mEXAMPLES[0m
       The  following  program  prints part of the file specified in its first
       command‚Äêline argument to standard output.  The range  of  bytes  to  be
       printed  is  specified  via  offset and length values in the second and
       third command‚Äêline arguments.  The program creates a memory mapping  of
       the required pages of the file and then uses [1mwrite[22m(2) to output the de‚Äê
       sired bytes.

   [1mProgram source[0m
       #include <fcntl.h>
       #include <stdio.h>
       #include <stdlib.h>
       #include <sys/mman.h>
       #include <sys/stat.h>
       #include <unistd.h>

       #define handle_error(msg) \
           do { perror(msg); exit(EXIT_FAILURE); } while (0)

       int
       main(int argc, char *argv[])
       {
           int          fd;
           char         *addr;
           off_t        offset, pa_offset;
           size_t       length;
           ssize_t      s;
           struct stat  sb;

           if (argc < 3 || argc > 4) {
               fprintf(stderr, "%s file offset [length]\n", argv[0]);
               exit(EXIT_FAILURE);
           }

           fd = open(argv[1], O_RDONLY);
           if (fd == -1)
               handle_error("open");

           if (fstat(fd, &sb) == -1)           /* To obtain file size */
               handle_error("fstat");

           offset = atoi(argv[2]);
           pa_offset = offset & ~(sysconf(_SC_PAGE_SIZE) - 1);
               /* offset for mmap() must be page aligned */

           if (offset >= sb.st_size) {
               fprintf(stderr, "offset is past end of file\n");
               exit(EXIT_FAILURE);
           }

           if (argc == 4) {
               length = atoi(argv[3]);
               if (offset + length > sb.st_size)
                   length = sb.st_size - offset;
                       /* Can't display bytes past end of file */

           } else {    /* No length arg ==> display to end of file */
               length = sb.st_size - offset;
           }

           addr = mmap(NULL, length + offset - pa_offset, PROT_READ,
                       MAP_PRIVATE, fd, pa_offset);
           if (addr == MAP_FAILED)
               handle_error("mmap");

           s = write(STDOUT_FILENO, addr + offset - pa_offset, length);
           if (s != length) {
               if (s == -1)
                   handle_error("write");

               fprintf(stderr, "partial write");
               exit(EXIT_FAILURE);
           }

           munmap(addr, length + offset - pa_offset);
           close(fd);

           exit(EXIT_SUCCESS);
       }

[1mSEE ALSO[0m
       [1mftruncate[22m(2),  [1mgetpagesize[22m(2),  [1mmemfd_create[22m(2),  [1mmincore[22m(2), [1mmlock[22m(2),
       [1mmmap2[22m(2), [1mmprotect[22m(2), [1mmremap[22m(2), [1mmsync[22m(2), [1mremap_file_pages[22m(2),  [1msetr‚Äê[0m
       [1mlimit[22m(2), [1mshmat[22m(2), [1muserfaultfd[22m(2), [1mshm_open[22m(3), [1mshm_overview[22m(7)

       The  descriptions  of the following files in [1mproc[22m(5): [4m/proc/[pid]/maps[24m,
       [4m/proc/[pid]/map_files[24m, and [4m/proc/[pid]/smaps[24m.

       B.O. Gallmeister, POSIX.4, O‚ÄôReilly, pp. 128‚Äì129 and 389‚Äì391.

Linux man‚Äêpages 6.03              2023‚Äê02‚Äê05                           [4mmmap[24m(2)
